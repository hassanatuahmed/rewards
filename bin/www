#!/usr/bin/env node

/**
 * Module dependencies.
 */
const config = require('../config/config');
const mongoose = require("mongoose");
var debug = require('debug')('myapp:server');
var http = require('http');
const glob = require('glob');

mongoose.connect(config.db);
const db = mongoose.connection;
db.on('error', () => {
    throw new Error('Unable to connect to database at ' + config.db);
});

const models = glob.sync(config.root + '/models/*.js');
models.forEach(function(model) {
    require(model);
});


var app = require('../app');
/**
 * Get port from environment and store in Express.
 */
var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);
/**
 * Create HTTP server.
 */

var server = http.createServer(app);
/**
 * Listen on provided port, on all network interfaces.
 */
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);
/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string' ?
        'Pipe ' + port :
        'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

async function insertRewardMappings() {
    const PlendifyRewardMapping = mongoose.model("RewardMapping");
    const plendifyRewardValue = await PlendifyRewardMapping.findOne({ currency: 'GHS' }).exec();
    if (plendifyRewardValue) {
        return;
    }
    const reward = new PlendifyRewardMapping({
        creditValue: 1,
        currencyValue: 10,
        currency: "GHS",
    });
    reward.save();
}
/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    insertRewardMappings();
    var addr = server.address();
    var bind = typeof addr === 'string' ?
        'pipe ' + addr :
        'port ' + addr.port;
    debug('Listening on ' + bind);
    console.log('Listening on port :' + bind);
}